AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Dockerized Flask app with MySQL

Parameters:
  DBUser:
    NoEcho: true
    Description: The database admin account name
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBPwd: 
    NoEcho: true
    Description: The database admin account password
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$

Resources:
  # VPC and Subnets
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: craft-bike-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref Subnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PublicSubnet1

  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  Subnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet3
  #ECR
  ECRReposiotry: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "craft-bike-ecr"
      ImageScanningConfiguration: 
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: '{
            "rules": [
                {
                    "rulePriority": 10,
                    "description": "Keep Latest Images",
                    "selection": {
                        "tagStatus": "tagged",
                        "tagPrefixList": ["latest"],
                        "countType": "imageCountMoreThan",
                        "countNumber": 9999
                    },
                    "action": {
                        "type": "expire"
                    }
                },
                {
                    "rulePriority": 20,
                    "description": "Delete Old Images",
                    "selection": {
                        "tagStatus": "tagged",
                        "tagPrefixList": ["main"],
                        "countType": "sinceImagePushed",
                        "countUnit": "days",
                        "countNumber": 30
                    },
                    "action": {
                        "type": "expire"
                    }
                }
            ]
          }'
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal: 
              AWS: 
                - !GetAtt ECSTaskExecutionRole.Arn
                - 'arn:aws:iam::512631731073:role/gha-deployment-role'
            Action: 
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchDeleteImage"
              - "ecr:BatchGetImage"
              - "ecr:CompleteLayerUpload"
              - "ecr:DescribeRepositories"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:InitiateLayerUpload"
              - "ecr:ListImages"
              - "ecr:PutImage"
              - "ecr:UploadLayerPart"
  # Security Groups
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for MySQL database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: DBSecurityGroup

  AppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for the Flask app
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0' 
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0' 
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: AppSecurityGroup

  # RDS MySQL Database
  # Database:
  #   Type: 'AWS::RDS::DBInstance'
  #   Properties:
  #     AllocatedStorage: '20'
  #     DBInstanceClass: db.t2.micro
  #     Engine: mysql
  #     EngineVersion: '5.7'
  #     MasterUsername: !Ref DBUser
  #     MasterUserPassword: !Ref DBPwd
  #     DBName: flaskdb
  #     VPCSecurityGroups:
  #       - !Ref DBSecurityGroup
  #     DBSubnetGroupName: !Ref DBSubnetGroup

  # RDS Subnet Group
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref Subnet2
        - !Ref Subnet3

  # ECS Cluster
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: CraftBikeECSCluster

  # ECRVPCEndpoint:
  #   Type: 'AWS::EC2::VPCEndpoint'
  #   Properties:
  #     VpcEndpointType: Interface
  #     ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
  #     VpcId: !Ref VPC
  #     PrivateDnsEnabled: true
  #     SubnetIds:
  #       - !Ref Subnet1
  #       - !Ref Subnet2
  #     SecurityGroupIds:
  #       - !Ref AppSecurityGroup
      
  # ECS Task Definition
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: FlaskApp
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: CraftBikeAppContainer
          Image: 512631731073.dkr.ecr.eu-central-1.amazonaws.com/craft-bike-ecr:latest
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/craft-bike
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
          # - Name: MYSQL_HOST
          #   Value: !GetAtt Database.Endpoint.Address
          - Name: MYSQL_USER
            Value: !Ref DBUser
          - Name: MYSQL_PASSWORD
            Value: !Ref DBPwd
          - Name: MYSQL_DB_NAME
            Value: flaskdb

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyName: ECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:ListImages
                  - ecr:DescribeRepositories
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # ECS Service
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref Subnet2
            - !Ref Subnet3
          SecurityGroups:
            - !Ref AppSecurityGroup
      TaskDefinition: !Ref ECSTaskDefinition
